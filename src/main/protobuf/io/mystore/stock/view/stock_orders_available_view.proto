syntax = "proto3";

package io.mystore.stock.view;

import "kalix/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "io/mystore/stock/entity/stock_order_entity.proto";
import "io/mystore/stock/view/stock_orders_model.proto";

service StockOrdersAvailable {
  option (kalix.codegen) = {
    view : {}
  };

  rpc GetStockOrdersAvailable(GetStockOrdersAvailableRequest)
      returns (GetStockOrdersAvailableResponse) {
    option (kalix.method).view.query = {
      query : "SELECT * AS stock_orders"
              "  FROM stock_orders_available"
              " WHERE shipped_utc IS NULL"
    };
    option (google.api.http) = {
      get : "/stock-orders-available"
    };
  }

  rpc OnStockOrderCreated(entity.StockOrderCreated) returns (StockOrder) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "stock_order"
    };
    option (kalix.method).view.update = {
      table : "stock_orders_available"
      transform_updates : true
    };
  }

  rpc OnStockSkuItemShipped(entity.StockSkuItemShipped) returns (StockOrder) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "stock_order"
    };
    option (kalix.method).view.update = {
      table : "stock_orders_available"
      transform_updates : true
    };
  }

  rpc OnStockSkuItemReleased(entity.StockSkuItemReleased) returns (StockOrder) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "stock_order"
    };
    option (kalix.method).view.update = {
      table : "stock_orders_available"
      transform_updates : true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (StockOrder) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "stock_order"
    };
    option (kalix.method).view.update = {
      table : "stock_orders_available"
      transform_updates : true
    };
  }
}

message GetStockOrdersAvailableRequest {}

message GetStockOrdersAvailableResponse {
  repeated StockOrder stock_orders = 1;
}
