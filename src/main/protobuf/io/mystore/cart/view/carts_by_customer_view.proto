syntax = "proto3";

package io.mystore.cart.view;

import "kalix/annotations.proto";
import "google/api/annotations.proto";
import "io/mystore/cart/entity/shopping_cart_entity.proto";
import "io/mystore/cart/view/cart.proto";

service CartsByCustomer {
  option (kalix.codegen) = {
    view : {}
  };

  rpc GetCartsByCustomer(GetCartsRequest) returns (GetCartsResponse) {
    option (kalix.method).view.query = {
      query : "SELECT * AS carts"
              "  FROM carts_by_customer"
              " WHERE customer_id = :customer_id"
    };
    option (google.api.http) = {
      get : "/carts-by-customer"
    };
  }

  rpc OnItemAdded(entity.ItemAdded) returns (Cart) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "shopping_cart"
    };
    option (kalix.method).view.update = {
      table : "carts_by_customer"
      transform_updates : true
    };
  }

  rpc OnItemChanged(entity.ItemChanged) returns (Cart) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "shopping_cart"
    };
    option (kalix.method).view.update = {
      table : "carts_by_customer"
      transform_updates : true
    };
  }

  rpc OnItemRemoved(entity.ItemRemoved) returns (Cart) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "shopping_cart"
    };
    option (kalix.method).view.update = {
      table : "carts_by_customer"
      transform_updates : true
    };
  }

  rpc OnCartCheckedOut(entity.CartCheckedOut) returns (Cart) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "shopping_cart"
    };
    option (kalix.method).view.update = {
      table : "carts_by_customer"
      transform_updates : true
    };
  }

  rpc OnCartDeleted(entity.CartDeleted) returns (Cart) {
    option (kalix.method).eventing.in = {
      event_sourced_entity : "shopping_cart"
    };
    option (kalix.method).view.update = {
      table : "carts_by_customer"
      transform_updates : true
    };
  }
}

message GetCartsRequest { string customer_id = 1; }

message GetCartsResponse { repeated Cart carts = 1; }
